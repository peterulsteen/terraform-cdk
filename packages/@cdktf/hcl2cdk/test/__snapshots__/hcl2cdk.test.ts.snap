// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convert typescript complex resource configuration 1`] = `
"new aws.CloudfrontDistribution(this, \\"s3_distribution\\", {
  aliases: [\\"mysite.example.com\\", \\"yoursite.example.com\\"],
  comment: \\"Some comment\\",
  defaultCacheBehavior: [
    {
      allowedMethods: [
        \\"DELETE\\",
        \\"GET\\",
        \\"HEAD\\",
        \\"OPTIONS\\",
        \\"PATCH\\",
        \\"POST\\",
        \\"PUT\\",
      ],
      cachedMethods: [\\"GET\\", \\"HEAD\\"],
      defaultTtl: 3600,
      forwardedValues: [
        {
          cookies: [
            {
              forward: \\"none\\",
            },
          ],
          queryString: false,
        },
      ],
      maxTtl: 86400,
      minTtl: 0,
      targetOriginId: \\"local_s3_origin_id\\",
      viewerProtocolPolicy: \\"allow-all\\",
    },
  ],
  defaultRootObject: \\"index.html\\",
  enabled: true,
  isIpv6Enabled: true,
  loggingConfig: [
    {
      bucket: \\"mylogs.s3.amazonaws.com\\",
      includeCookies: false,
      prefix: \\"myprefix\\",
    },
  ],
  orderedCacheBehavior: [
    {
      allowedMethods: [\\"GET\\", \\"HEAD\\", \\"OPTIONS\\"],
      cachedMethods: [\\"GET\\", \\"HEAD\\", \\"OPTIONS\\"],
      compress: true,
      defaultTtl: 86400,
      forwardedValues: [
        {
          cookies: [
            {
              forward: \\"none\\",
            },
          ],
          headers: [\\"Origin\\"],
          queryString: false,
        },
      ],
      maxTtl: 31536000,
      minTtl: 0,
      pathPattern: \\"/content/immutable/*\\",
      targetOriginId: \\"local_s3_origin_id\\",
      viewerProtocolPolicy: \\"redirect-to-https\\",
    },
    {
      allowedMethods: [\\"GET\\", \\"HEAD\\", \\"OPTIONS\\"],
      cachedMethods: [\\"GET\\", \\"HEAD\\"],
      compress: true,
      defaultTtl: 3600,
      forwardedValues: [
        {
          cookies: [
            {
              forward: \\"none\\",
            },
          ],
          queryString: false,
        },
      ],
      maxTtl: 86400,
      minTtl: 0,
      pathPattern: \\"/content/*\\",
      targetOriginId: \\"local_s3_origin_id\\",
      viewerProtocolPolicy: \\"redirect-to-https\\",
    },
  ],
  origin: [
    {
      domainName: \\"aws_s3_bucket.b.bucket_regional_domain_name\\",
      originId: \\"local_s3_origin_id\\",
      s3OriginConfig: [
        {
          originAccessIdentity:
            \\"origin-access-identity/cloudfront/ABCDEFG1234567\\",
        },
      ],
    },
  ],
  priceClass: \\"PriceClass_200\\",
  restrictions: [
    {
      geoRestriction: [
        {
          locations: [\\"US\\", \\"CA\\", \\"GB\\", \\"DE\\"],
          restrictionType: \\"whitelist\\",
        },
      ],
    },
  ],
  tags: {
    environment: \\"production\\",
  },
  viewerCertificate: [
    {
      cloudfrontDefaultCertificate: true,
    },
  ],
});
"
`;

exports[`convert typescript data references configuration 1`] = `
"const varBucketName = new TerraformVariable(this, \\"bucket_name\\", {
  default: \\"demo\\",
});
const dataAwsS3BucketExamplebucket = new aws.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: varBucketName,
});
new aws.S3BucketObject(this, \\"examplebucket_object\\", {
  bucket: dataAwsS3Bucket.examplebucket.arn,
  key: \\"someobject\\",
  source: \\"index.html\\",
});
"
`;

exports[`convert typescript double references configuration 1`] = `
"const varBucketName = new TerraformVariable(this, \\"bucket_name\\", {
  default: \\"demo\\",
});
new aws.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: varBucketName,
  tags: {
    tagKey: varBucketName,
  },
});
"
`;

exports[`convert typescript empty provider configuration 1`] = `
"import * as docker from \\"./.gen/docker\\";
new docker.DockerProvider(this, \\"docker\\", {});
"
`;

exports[`convert typescript errors on arithmetics 1`] = `"Unsupported Terraform feature found: Arithmetics are not yet supported: \${var.members + var.admins}"`;

exports[`convert typescript errors on conditionals 1`] = `"Unsupported Terraform feature found: Conditionals are not yet supported: \${resource.aws_kms_key.deletion_window_in_days > 3 ? aws_s3_bucket.examplebucket.id : []}"`;

exports[`convert typescript errors on count loops 1`] = `"Unsupported Terraform feature found: for-each loops are not yet supported: {\\"count\\":\\"\${length(var.users)}\\",\\"name\\":\\"\${element(var.users, count.index)}\\",\\"path\\":\\"/system/\\",\\"tags\\":{\\"tag-key\\":\\"tag-value\\"}}"`;

exports[`convert typescript errors on dynamic blocks 1`] = `"Unsupported Terraform feature found: for-each loops are not yet supported: {\\"content\\":[{\\"name\\":\\"\${setting.value[\\\\\\"name\\\\\\"]}\\",\\"namespace\\":\\"\${setting.value[\\\\\\"namespace\\\\\\"]}\\",\\"value\\":\\"\${setting.value[\\\\\\"value\\\\\\"]}\\"}],\\"for_each\\":\\"\${var.settings}\\"}"`;

exports[`convert typescript errors on for expression 1 1`] = `
"Unsupported Terraform feature found: For expressions are not yet supported: \${{
              for name, user in var.users : name => user
              if user.is_admin
            }}"
`;

exports[`convert typescript errors on for expression 2 1`] = `
"Unsupported Terraform feature found: For expressions are not yet supported: \${{
              for name, user in var.users : user.role => name...
            }}"
`;

exports[`convert typescript errors on for_each loops 1`] = `"Unsupported Terraform feature found: for-each loops are not yet supported: {\\"for_each\\":\\"\${var.users}\\",\\"name\\":\\"\${each.key}\\",\\"path\\":\\"/system/\\",\\"tags\\":{\\"tag-key\\":\\"tag-value\\"}}"`;

exports[`convert typescript errors on resource references with HCL functions 1`] = `"Unsupported Terraform feature found: Functions are not yet supported: \${element(aws_s3_bucket.examplebucket, 0).id}"`;

exports[`convert typescript errors on resource references with lists 1`] = `"Unsupported Terraform feature found: Splat operations (resource.name.*.property) are not yet supported: \${aws_s3_bucket.examplebucket.*.id}"`;

exports[`convert typescript locals configuration 1`] = `
"const howMany = 42;
const isItGreat = true;
const owner = \\"Community Team\\";
const serviceName = \\"forum\\";
"
`;

exports[`convert typescript locals references configuration 1`] = `
"const bucketName = \\"foo\\";
new aws.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: localBucketName,
});
"
`;

exports[`convert typescript modules configuration 1`] = `
"import * as TerraformAwsModulesVpcAws from \\"./.gen/terraform-aws-modules/vpc/aws\\";
new TerraformAwsModulesVpcAws(this, \\"vpc\\", {
  azs: [\\"eu-west-1a\\", \\"eu-west-1b\\", \\"eu-west-1c\\"],
  cidr: \\"10.0.0.0/16\\",
  enableNatGateway: true,
  enableVpnGateway: true,
  name: \\"my-vpc\\",
  privateSubnets: [\\"10.0.1.0/24\\", \\"10.0.2.0/24\\", \\"10.0.3.0/24\\"],
  publicSubnets: [\\"10.0.101.0/24\\", \\"10.0.102.0/24\\", \\"10.0.103.0/24\\"],
  tags: {
    environment: \\"dev\\",
    terraform: \\"true\\",
  },
});
"
`;

exports[`convert typescript multiple locals blocks configuration 1`] = `
"const owner = \\"Community Team\\";
const serviceName = \\"forum\\";
const howMany = 42;
const isItGreat = true;
"
`;

exports[`convert typescript multiple outputs configuration 1`] = `
"new TerraformOutput(this, \\"first_cidr_out\\", {
  value: \\"first\\",
});
new TerraformOutput(this, \\"second_cidr_out\\", {
  value: \\"second\\",
});
"
`;

exports[`convert typescript output configuration 1`] = `
"new TerraformOutput(this, \\"cidr_out\\", {
  value: \\"test\\",
});
"
`;

exports[`convert typescript output withdescription configuration 1`] = `
"new TerraformOutput(this, \\"cidr_out\\", {
  value: \\"test\\",
  description: \\"Best output\\",
  sensitive: true,
});
"
`;

exports[`convert typescript provider with complex config configuration 1`] = `
"import * as aws from \\"./.gen/aws\\";
new aws.AwsProvider(this, \\"aws\\", {
  accessKey: \\"mock_access_key\\",
  endpoints: [
    {
      dynamodb: \\"http://localhost:8000\\",
    },
  ],
  region: \\"us-east-1\\",
  secretKey: \\"mock_secret_key\\",
  skipCredentialsValidation: true,
  skipMetadataApiCheck: true,
  skipRequestingAccountId: true,
});
"
`;

exports[`convert typescript referenced modules configuration 1`] = `
"import * as TerraformAwsModulesVpcAws from \\"./.gen/terraform-aws-modules/vpc/aws\\";
const moduleVpc = new TerraformAwsModulesVpcAws(this, \\"vpc\\", {
  azs: [\\"eu-west-1a\\", \\"eu-west-1b\\", \\"eu-west-1c\\"],
  cidr: \\"10.0.0.0/16\\",
  enableNatGateway: true,
  enableVpnGateway: true,
  name: \\"my-vpc\\",
  privateSubnets: [\\"10.0.1.0/24\\", \\"10.0.2.0/24\\", \\"10.0.3.0/24\\"],
  publicSubnets: [\\"10.0.101.0/24\\", \\"10.0.102.0/24\\", \\"10.0.103.0/24\\"],
  tags: {
    environment: \\"dev\\",
    terraform: \\"true\\",
  },
});
new TerraformOutput(this, \\"subnet_ids\\", {
  value: moduleVpc.publicSubnetsOutput,
});
"
`;

exports[`convert typescript resource references configuration 1`] = `
"const awsKmsKeyExamplekms = new aws.KmsKey(this, \\"examplekms\\", {
  deletionWindowInDays: 7,
  description: \\"KMS key 1\\",
});
const awsS3BucketExamplebucket = new aws.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: \\"examplebuckettftest\\",
});
new aws.S3BucketObject(this, \\"examplebucket_object\\", {
  bucket: awsS3BucketExamplebucket.id,
  key: \\"someobject\\",
  kmsKeyId: awsKmsKeyExamplekms.arn,
  source: \\"index.html\\",
});
"
`;

exports[`convert typescript sensitive output configuration 1`] = `
"new TerraformOutput(this, \\"cidr_out\\", {
  value: \\"test\\",
  sensitive: true,
});
"
`;

exports[`convert typescript simple data source configuration 1`] = `
"new aws.Subnet(this, \\"selected\\", {
  id: \\"subnet_id\\",
});
"
`;

exports[`convert typescript simple resource configuration 1`] = `
"new aws.Vpc(this, \\"example\\", {
  cidrBlock: \\"10.0.0.0/16\\",
});
"
`;

exports[`convert typescript variable configuration 1`] = `
"new TerraformVariable(this, \\"weekday\\", {});
"
`;

exports[`convert typescript variable references configuration 1`] = `
"const varBucketName = new TerraformVariable(this, \\"bucket_name\\", {
  default: \\"demo\\",
});
new aws.S3Bucket(this, \\"examplebucket\\", {
  acl: \\"private\\",
  bucket: varBucketName,
});
"
`;

exports[`convert typescript variable with default configuration 1`] = `
"new TerraformVariable(this, \\"availability_zone_names\\", {
  default: [\\"us-west-1a\\"],
  description: \\"What AMI to use to create an instance\\",
});
"
`;
